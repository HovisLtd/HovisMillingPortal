@{
    var grid = Html.DevExpress().GridView(settings => {
        settings.Name = "TestDetailGridView";
        settings.CallbackRouteValues = new { Controller = "UMQC", Action = "TestDetail_GridViewPartial", TestDDateEdit = ViewBag.TestDDateEdit };
        settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
        //settings.CommandColumn.AdaptivePriority = 1;
        //settings.CommandColumn.CustomButtons.Column.Width = System.Web.UI.WebControls.Unit.Pixel(35);
        //settings.CommandColumn.CustomButtons.Column.MinWidth = 82;

        settings.CommandColumn.Visible = false;
        settings.CommandColumn.ShowNewButton = false;
        settings.CommandColumn.ShowDeleteButton = false;
        settings.CommandColumn.ShowEditButton = false;

        settings.SettingsPager.Visible = true;
        settings.SettingsPager.PageSize = 20;

        settings.SettingsCookies.Enabled = true;
        settings.SettingsCookies.CookiesID = "NewTestDetailGridLayoutv3";

        //settings.ClientSideEvents.CustomizationWindowCloseUp = "ExceptionHeaderGridView_CustomizationWindowCloseUp";

        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRow = true;
        settings.Settings.ShowFilterRowMenu = true;
        settings.SettingsBehavior.AllowSelectByRowClick = false;
        settings.SettingsBehavior.EnableCustomizationWindow = true;
        settings.SettingsBehavior.AllowClientEventsOnLoad = false;
        //settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.Disabled;
        settings.SettingsBehavior.AllowEllipsisInText = true;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 600;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;
        settings.EditFormLayoutProperties.SettingsAdaptivity.AdaptivityMode = FormLayoutAdaptivityMode.SingleColumnWindowLimit;
        settings.EditFormLayoutProperties.SettingsAdaptivity.SwitchToSingleColumnAtWindowInnerWidth = 600;

        settings.SettingsDetail.AllowOnlyOneMasterRowExpanded = true;
        settings.SettingsDetail.ShowDetailRow = false;

        //settings.CommandColumn.SetHeaderCaptionTemplateContent(c =>
        //{
        //    //c.Column.Width = 70;
        //    Html.DevExpress().HyperLink(hl =>
        //    {
        //        hl.Name = "hlNew_"; // + c.KeyValue.ToString();
        //        hl.NavigateUrl = "javascript:;";
        //        hl.Properties.Text = "New";
        //        hl.ToolTip = "New Activity";
        //        hl.Properties.ImageUrl = "~/Content/Img/Button_Add_Icon_16.png";
        //        hl.Properties.ClientSideEvents.Click = string.Format("function(s, e) {{ window.location.href = '{0}' }}", DevExpressHelper.GetUrl(new { Controller = "Journey", Action = "Create" }));
        //        //hl.Properties.ClientSideEvents.Click = string.Format("function(s, e) {{ {0}.AddNewRow(); }}", settings.Name);
        //        //hl.Properties.ClientSideEvents.Click = string.Format("function(s, e) {{ window.location.href = '{0}' }}", DevExpressHelper.GetUrl(new { Controller = "WeSupplyEDIAccount", Action = "AccountChangeGridViewPartialAddNew" }));
        //    }).Render();
        //});

        settings.KeyFieldName = "ResultDetailRecid";

        //GridViewCommandColumnCustomButton btnEditError = new GridViewCommandColumnCustomButton();
        //btnEditError.ID = "btnEditError";
        //btnEditError.Image.Url = "~/Content/Img/Edit_Icon_16.png";
        //btnEditError.Image.ToolTip = "Edit Activity";
        //settings.CommandColumn.CustomButtons.Add(btnEditError);

        //GridViewCommandColumnCustomButton btnClose = new GridViewCommandColumnCustomButton();
        //btnClose.ID = "btnClose";
        //btnClose.Image.Url = "~/Content/Img/Closed_Folder_Icon_16.png";
        //btnClose.Image.ToolTip = "Close";
        //settings.CommandColumn.CustomButtons.Add(btnClose);

        //GridViewCommandColumnCustomButton btnPlus1week = new GridViewCommandColumnCustomButton();
        //btnPlus1week.ID = "btnPlus1week";
        //btnPlus1week.Image.Url = "~/Content/Img/Number_1_Icon_16.png";
        //btnPlus1week.Image.ToolTip = "Add One week";
        //settings.CommandColumn.CustomButtons.Add(btnPlus1week);

        //GridViewCommandColumnCustomButton btnPlus2week = new GridViewCommandColumnCustomButton();
        //btnPlus2week.ID = "btnPlus2week";
        //btnPlus2week.Image.Url = "~/Content/Img/Number_2_Icon_16.png";
        //btnPlus2week.Image.ToolTip = "Add two weeks";
        //settings.CommandColumn.CustomButtons.Add(btnPlus2week);

        //GridViewCommandColumnCustomButton btnPlus4week = new GridViewCommandColumnCustomButton();
        //btnPlus4week.ID = "btnPlus4week";
        //btnPlus4week.Image.Url = "~/Content/Img/Number_4_Icon_16.png";
        //btnPlus4week.Image.ToolTip = "Add four weeks";
        //settings.CommandColumn.CustomButtons.Add(btnPlus4week);

        //GridViewCommandColumnCustomButton btnPlus6week = new GridViewCommandColumnCustomButton();
        //btnPlus6week.ID = "btnPlus6week";
        //btnPlus6week.Image.Url = "~/Content/Img/Number_6_Icon_16.png";
        //btnPlus6week.Image.ToolTip = "Add six weeks";
        //settings.CommandColumn.CustomButtons.Add(btnPlus6week);

        //settings.ClientSideEvents.CustomButtonClick = "function (s, e) { OErrorOnEditClick(s, e); }";
        //settings.ClientSideEvents.CustomButtonClick = string.Format("function(s, e) {{ TrackerHeaderClick(s, e, '{0}', '{1}', '{2}', '{3}', '{4}', '{5}' ); }}", DevExpressHelper.GetUrl(new { Controller = "Tracker", Action = "Edit" }), DevExpressHelper.GetUrl(new { Controller = "Tracker", Action = "Close" }), DevExpressHelper.GetUrl(new { Controller = "Tracker", Action = "Add1Week" }), DevExpressHelper.GetUrl(new { Controller = "Tracker", Action = "Add2Week" }), DevExpressHelper.GetUrl(new { Controller = "Tracker", Action = "Add4Week" }), DevExpressHelper.GetUrl(new { Controller = "Tracker", Action = "Add6Week" }));


        //settings.CustomButtonInitialize = (s, e) =>
        //{
        //    if (e.CellType == GridViewTableCommandCellType.Filter) return;
        //    if (e.ButtonID == "btnEditError")
        //    {
        //        e.Text = "";
        //        if (User.IsInRole("Admin") || User.IsInRole("JourneyUser"))
        //            e.Visible = DefaultBoolean.True;
        //        else
        //            e.Visible = DefaultBoolean.False;
        //    }
        //};

        //settings.HtmlRowPrepared = (s, e) =>
        //{
        //    if (e.KeyValue != null)
        //    {
        //        //if (Convert.ToString(e.GetValue("ActiveFlag")) == "0")
        //        if (Convert.ToDecimal(e.GetValue("ResultActualScore")) > Convert.ToDecimal(e.GetValue("ResultMaxScore")))
        //        {
        //            e.Row.BackColor = System.Drawing.Color.Salmon;

        //            //e.Row.ForeColor = System.Drawing.Color.Salmon;
        //        }
        //        if (Convert.ToDecimal(e.GetValue("ResultActualScore")) >= Convert.ToDecimal(e.GetValue("ResultMinScore")) & Convert.ToDecimal(e.GetValue("ResultActualScore")) <= Convert.ToDecimal(e.GetValue("ResultMaxScore")))
        //        {
        //            //e.Row.BackColor = System.Drawing.Color.Orange;
        //            e.Row.BackColor = System.Drawing.Color.LightGreen;
        //            //e.Row.ForeColor = System.Drawing.Color.Salmon;
        //        }
        //        if (Convert.ToDecimal(e.GetValue("ResultActualScore")) < Convert.ToDecimal(e.GetValue("ResultMinScore")))
        //        {
        //            e.Row.BackColor = System.Drawing.Color.Salmon;
        //            //e.Row.ForeColor = System.Drawing.Color.Salmon;
        //        }
        //    }
        //};

        settings.HtmlDataCellPrepared = (sender, e) =>
        {

            if (e.DataColumn.FieldName == "ResultActualScore")
            {
                if (Convert.ToDecimal(e.GetValue("ResultActualScore")) > Convert.ToDecimal(e.GetValue("ResultMaxScore")))
                {
                    if (Convert.ToDecimal(e.GetValue("ResultActualScore")) == Convert.ToDecimal("0"))
                    {
                        e.Cell.BackColor = System.Drawing.Color.White;
                    }
                    else
                    {
                        if (e.GetValue("ConcessionDesc") != null)
                        {
                            e.Cell.BackColor = System.Drawing.Color.Orange;
                        }
                        else
                        {
                            e.Cell.BackColor = System.Drawing.Color.Salmon;
                        }
                    }
                }
                if (Convert.ToDecimal(e.GetValue("ResultActualScore")) >= Convert.ToDecimal(e.GetValue("ResultMinScore")) & Convert.ToDecimal(e.GetValue("ResultActualScore")) <= Convert.ToDecimal(e.GetValue("ResultMaxScore")))
                {
                    if (Convert.ToDecimal(e.GetValue("ResultActualScore")) == Convert.ToDecimal("0"))
                    {
                        e.Cell.BackColor = System.Drawing.Color.White;
                    }
                    else
                    {
                        e.Cell.BackColor = System.Drawing.Color.LightGreen;
                    }
                }
                if (Convert.ToDecimal(e.GetValue("ResultActualScore")) < Convert.ToDecimal(e.GetValue("ResultMinScore")))
                {
                    if (Convert.ToDecimal(e.GetValue("ResultActualScore")) == Convert.ToDecimal("0"))
                    {
                        e.Cell.BackColor = System.Drawing.Color.White;
                    }
                    else
                    {
                        if (e.GetValue("ConcessionDesc") != null)
                        {
                            e.Cell.BackColor = System.Drawing.Color.Orange;
                        }
                        else
                        {
                            e.Cell.BackColor = System.Drawing.Color.Salmon;
                        }
                    }
                }
            }
        };

        //settings.Columns.Add(column =>
        //{
        //    column.Name = "ComColumn";
        //    //column.Caption = "#";
        //    column.Width = 40;
        //    column.VisibleIndex = 1;
        //    column.SetDataItemTemplateContent(c =>
        //    {

        //        Html.DevExpress().HyperLink(hl =>
        //        {
        //            hl.Name = "hlEdit_" + c.KeyValue.ToString();
        //            hl.NavigateUrl = "javascript:;";
        //            hl.Properties.Text = "Edit";
        //            hl.Properties.ImageUrl = "~/Content/Img/Edit_Icon_16.png";
        //            hl.Properties.ClientSideEvents.Click = string.Format("function(s, e) {{ {0}.StartEditRow('{1}'); }}", settings.Name, c.VisibleIndex);
        //        }).Render();
        //    });
        //});

        settings.Columns.Add(column =>
        {
            column.Caption = "Flour Grade";
            column.FieldName = "ResultProductRecid";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.Settings.SortMode = DevExpress.XtraGrid.ColumnSortMode.DisplayText;
            column.SortOrder = DevExpress.Data.ColumnSortOrder.Ascending;
            //column.Settings.FilterMode = ColumnFilterMode.DisplayText;
            var comboBoxProperties = (ComboBoxProperties)column.PropertiesEdit;
            comboBoxProperties.TextField = "RecipeDesc";
            comboBoxProperties.ValueField = "ProductMasterRecid";
            comboBoxProperties.ValueType = typeof(int);
            comboBoxProperties.DataSource = ViewData["Recipe"];
            column.AllowTextTruncationInAdaptiveMode = true;
            column.Width = 30;
            column.AdaptivePriority = 1;
            column.CellStyle.Wrap = DefaultBoolean.False;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "ResultMasterStdRecid";
            column.Caption = "Attribute";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            var comboBoxProperties = column.PropertiesEdit as ComboBoxProperties;
            comboBoxProperties.DataSource = ViewBag.Standards;
            comboBoxProperties.ValueType = typeof(int);
            column.Width = 40;
            column.AllowTextTruncationInAdaptiveMode = true;
            column.AdaptivePriority = 2;
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "ResultPlantRecid";
            column.Caption = "Plant";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            var comboBoxProperties = column.PropertiesEdit as ComboBoxProperties;
            comboBoxProperties.DataSource = ViewBag.Plant;
            comboBoxProperties.ValueType = typeof(int);
            column.Width = 30;
            column.AllowTextTruncationInAdaptiveMode = false;
            column.AdaptivePriority = 2;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "ResultFuncRecid";
            column.Caption = "Function";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            var comboBoxProperties = column.PropertiesEdit as ComboBoxProperties;
            comboBoxProperties.DataSource = ViewBag.Function;
            comboBoxProperties.ValueType = typeof(int);
            column.Width = 30;
            column.AllowTextTruncationInAdaptiveMode = false;
            column.AdaptivePriority = 3;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "ResultShiftRecid";
            column.Caption = "Shift";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            var comboBoxProperties = column.PropertiesEdit as ComboBoxProperties;
            comboBoxProperties.DataSource = ViewBag.Shift;
            comboBoxProperties.ValueType = typeof(int);
            column.Width = 30;
            column.AllowTextTruncationInAdaptiveMode = false;
            column.AdaptivePriority = 3;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "ResultJobNo";
            column.Caption = "Job No";
            column.CellStyle.Wrap = DefaultBoolean.False;
            column.Width = 20;
            column.AllowTextTruncationInAdaptiveMode = true;
            column.AdaptivePriority = 3;
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "ResultBinNumber";
            column.Caption = "Bin Number";
            column.CellStyle.Wrap = DefaultBoolean.False;
            column.Width = 20;
            column.AllowTextTruncationInAdaptiveMode = true;
            column.AdaptivePriority = 3;
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "ResultMinScore";
            column.Caption = "Minimum";
            column.CellStyle.Wrap = DefaultBoolean.False;
            column.Width = 20;
            column.AllowTextTruncationInAdaptiveMode = false;
            column.AdaptivePriority = 3;
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "ResultTargetScore";
            column.Caption = "Target";
            column.CellStyle.Wrap = DefaultBoolean.False;
            column.Width = 20;
            column.AllowTextTruncationInAdaptiveMode = true;
            column.AdaptivePriority = 3;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "ResultMaxScore";
            column.Caption = "Maximum";
            column.CellStyle.Wrap = DefaultBoolean.False;
            column.Width = 20;
            column.AllowTextTruncationInAdaptiveMode = false;
            column.AdaptivePriority = 3;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "ResultActualScore";
            column.Caption = "Actual";
            column.CellStyle.Wrap = DefaultBoolean.False;
            column.Width = 20;
            column.AllowTextTruncationInAdaptiveMode = true;
            column.AdaptivePriority = 1;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "ResultCreationDate";
            column.Caption = "Creation Date";
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            var dateeditProperties = column.PropertiesEdit as DateEditProperties;
            dateeditProperties.DisplayFormatString = "dd/MM/yyyy HH:mm";
            //column.Width = 70;
            //column.VisibleIndex = 6;
            column.Settings.AutoFilterCondition = AutoFilterCondition.LessOrEqual;
            column.Width = 40;
            column.AllowTextTruncationInAdaptiveMode = true;
            column.AdaptivePriority = 2;
        });

        settings.Columns.Add(c => { c.FieldName = "ResultCreatedBy"; c.Caption = "ResultCreatedBy"; c.Width = 60; c.Visible = false; c.AdaptivePriority = 2; c.AllowTextTruncationInAdaptiveMode = true; });
        settings.Columns.Add(c => { c.FieldName = "ResultLastChangedBy"; c.Caption = "ResultLastChangedBy"; c.Width = 50; c.Visible = false; c.AdaptivePriority = 2; c.AllowTextTruncationInAdaptiveMode = true; });
        settings.Columns.Add(c => { c.FieldName = "ResultActiveFlag"; c.Caption = "ResultActiveFlag"; c.Width = 10; c.Visible = false; c.AdaptivePriority = 2; c.AllowTextTruncationInAdaptiveMode = true; });
        settings.Columns.Add(column =>
        {
            column.FieldName = "ResultLastChangedDate";
            column.Caption = "Last Changed Date";
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            var dateeditProperties = column.PropertiesEdit as DateEditProperties;
            dateeditProperties.DisplayFormatString = "dd/MM/yyyy HH:mm";
            //column.Width = 70;
            //column.VisibleIndex = 6;
            column.Settings.AutoFilterCondition = AutoFilterCondition.LessOrEqual;
            column.Width = 40;
            column.AllowTextTruncationInAdaptiveMode = true;
            column.AdaptivePriority = 2;
            column.Visible = false;
        });
        settings.Columns.Add(c => { c.FieldName = "ResultComments"; c.Caption = "ResultComments"; c.Width = 170; c.Visible = false; c.AdaptivePriority = 2; c.AllowTextTruncationInAdaptiveMode = true; });
        settings.Columns.Add(c => { c.FieldName = "ResultTestTaken"; c.Caption = "Time test taken"; c.Width = 50; c.Visible = false; c.AdaptivePriority = 2; c.AllowTextTruncationInAdaptiveMode = true; });
        settings.Columns.Add(c => { c.FieldName = "ExcludeAverages"; c.Caption = "ExcludeAverages"; c.Width = 10; c.Visible = false; c.AdaptivePriority = 2; c.AllowTextTruncationInAdaptiveMode = true; });
        settings.Columns.Add(c => { c.FieldName = "WheatfeedBinNumber"; c.Caption = "WheatfeedBinNumber"; c.Width = 50; c.Visible = false; c.AdaptivePriority = 2; c.AllowTextTruncationInAdaptiveMode = true; });
        settings.Columns.Add(c => { c.FieldName = "GristVersionNumber"; c.Caption = "GristVersionNumber"; c.Width = 50; c.Visible = false; c.AdaptivePriority = 2; c.AllowTextTruncationInAdaptiveMode = true; });
        settings.Columns.Add(c => { c.FieldName = "plannedJobtonnage"; c.Caption = "plannedJobtonnage"; c.Width = 50; c.Visible = false; c.AdaptivePriority = 2; c.AllowTextTruncationInAdaptiveMode = true; });
        settings.Columns.Add(c => { c.FieldName = "finalJobtonnage"; c.Caption = "finalJobtonnage"; c.Width = 50; c.Visible = false; c.AdaptivePriority = 2; c.AllowTextTruncationInAdaptiveMode = true; });
        //settings.Columns.Add(c => { c.FieldName = "Recid"; c.Caption = "Activity ID"; c.Width = 70; c.Visible = false; });
        //settings.Columns.Add(c => { c.FieldName = "CreateDate"; c.Caption = "Created Date"; c.Width = 150; c.Visible = false; });
        //settings.Columns.Add(c => { c.FieldName = "CreatedBy"; c.Caption = "Created By"; c.Width = 170; c.Visible = false; });
        //settings.SetDetailRowTemplateContent(c =>
        //{
        //    Html.RenderAction("JourneyDetail_GridViewPartial", new { journeyRecid = DataBinder.Eval(c.DataItem, "journeyRecid") });
        //});
        //settings.PreRender = (sender, e) =>
        //{
        //    ((MVCxGridView)sender).DetailRows.ExpandRow(0);
        //};
    });
    if (ViewData["EditError"] != null){
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()