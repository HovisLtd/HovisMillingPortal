@{
    var grid = Html.DevExpress().GridView(settings => {
        settings.Name = "TestByFunctionGridView";
        settings.CallbackRouteValues = new { Controller = "UMQC", Action = "TestByFunctionGridViewPartial" };

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "UMQC", Action = "TestByFunctionGridViewPartialAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "UMQC", Action = "TestByFunctionGridViewPartialUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "UMQC", Action = "TestByFunctionGridViewPartialDelete" };
        settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.CommandColumn.Visible = false;
        settings.CommandColumn.ShowNewButton = false;
        settings.CommandColumn.ShowDeleteButton = false;
        settings.CommandColumn.ShowEditButton = false;

        settings.KeyFieldName = "ResultFuncStdRecid";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;
        settings.Columns.Add(column =>
        {
            column.Name = "ComColumn";
            //column.Caption = "#";
            column.SetHeaderTemplateContent(c =>
            {
                Html.DevExpress().HyperLink(hl =>
                {
                    hl.Name = "hlNew_"; // + c.KeyValue.ToString();
                    hl.NavigateUrl = "javascript:;";
                    hl.Properties.Text = "New";
                    hl.ToolTip = "New";
                    hl.Properties.ImageUrl = "~/Content/Img/Button_Add_Icon_16.png";
                    hl.Properties.ClientSideEvents.Click = string.Format("function(s, e) {{ {0}.AddNewRow(); }}", settings.Name);
                }).Render();
            });
            column.SetDataItemTemplateContent(c =>
            {
                Html.DevExpress().HyperLink(hl =>
                {
                    hl.Name = "hlEdit_" + c.KeyValue.ToString();
                    hl.NavigateUrl = "javascript:;";
                    hl.Properties.Text = "Edit";
                    hl.ToolTip = "Edit";
                    hl.Properties.ImageUrl = "~/Content/Img/Edit_Icon_16.png";
                    hl.Properties.ClientSideEvents.Click = string.Format("function(s, e) {{ {0}.StartEditRow('{1}'); }}", settings.Name, c.VisibleIndex);
                }).Render();
            });
            column.SetEditItemTemplateContent(c =>
            {

            });

            column.Width = 60;
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "ResultStdRecid";
            column.Caption = "Attribute";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            var comboBoxProperties = column.PropertiesEdit as ComboBoxProperties;
            comboBoxProperties.DataSource = ViewBag.Standards;
            comboBoxProperties.ValueType = typeof(int);
            column.Width = 40;
            column.AllowTextTruncationInAdaptiveMode = true;
            column.AdaptivePriority = 2;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "ResultFuncRecid";
            column.Caption = "Function Name";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            var comboBoxProperties = column.PropertiesEdit as ComboBoxProperties;
            comboBoxProperties.DataSource = ViewBag.Function;
            comboBoxProperties.ValueType = typeof(int);
            column.Width = 40;
            column.AllowTextTruncationInAdaptiveMode = true;
            column.AdaptivePriority = 2;
        });
     });
    if (ViewData["EditError"] != null){
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()